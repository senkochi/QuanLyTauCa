-- I. CREATE TABLE
-- 1. Bang USER
CREATE TABLE APP_USER (
    USER_ID        NVARCHAR2(20)   PRIMARY KEY,
    USERNAME       NVARCHAR2(50)   NOT NULL UNIQUE,
    PASSWORD       NVARCHAR2(100)  NOT NULL,
    ROLE           NVARCHAR2(20)   DEFAULT 'CHUTAU'
);

-- 2. Bang ADMIN
CREATE TABLE ADMIN (
    MaAdmin        NVARCHAR2(20)    PRIMARY KEY,
    HoTen          NVARCHAR2(100)   NOT NULL,
    CoQuan         NVARCHAR2(100)   NOT NULL,
    CCCD           NVARCHAR2(20)    NOT NULL UNIQUE
);

-- 3. Bang CHU_TAU
CREATE TABLE CHU_TAU (
    MaChuTau        NVARCHAR2(20)   PRIMARY KEY,
    HoTen           NVARCHAR2(50)   NOT NULL,
    SDT             NVARCHAR2(20)   NOT NULL,
    DiaChi          NVARCHAR2(100),
    CCCD            NVARCHAR2(20)   NOT NULL UNIQUE,
    TrangThaiDuyet  NVARCHAR2(50)   DEFAULT 'DANG CHO'
);

-- 4. Bang TAU_CA
CREATE TABLE TAU_CA (
    MaTauCa            NVARCHAR2(20) PRIMARY KEY,
    SoDangKy           NVARCHAR2(50) NOT NULL UNIQUE,
    ChieuDai           NUMBER(10,2),
    CongSuat           NUMBER(10,2),
    NamDongTau         INTEGER,
    TrangThaiDuyet     NVARCHAR2(20) DEFAULT 'DANG CHO',
    TrangThaiHoatDong  NVARCHAR2(20) DEFAULT 'DANG CHO|CHUA DK',
    MaChuTau           NVARCHAR2(20) NOT NULL,
    MaNgheChinh        NVARCHAR2(20) NOT NULL
);


-- 5. Bang NGHE
CREATE TABLE NGHE (
    MaNghe        NVARCHAR2(20) PRIMARY KEY,
    TenNghe       NVARCHAR2(100) NOT NULL UNIQUE
);

-- 6. BANG TAU_NGHE
CREATE TABLE TAU_NGHE (
    MaTauCa       NVARCHAR2(20),
    MaNghe        NVARCHAR2(20),
    VungHoatDong  NVARCHAR2(100) NOT NULL,
    PRIMARY KEY (MaTauCa, MaNghe)
);

-- 7. Bang VI_PHAM
CREATE TABLE VI_PHAM (
    MaViPham            NVARCHAR2(20)   PRIMARY KEY,
    ThoiGian            DATE            DEFAULT SYSDATE,
    ViTri               SDO_GEOMETRY    NOT NULL,
    MoTa                NVARCHAR2(400),
    MaChuyenDanhBat     NVARCHAR2(20)   NOT NULL
);

-- 8. Bang LOG_HAI_TRINH
CREATE TABLE LOG_HAI_TRINH (
    MaLogHaiTrinh       INTEGER,
    MaChuyenDanhBat     NVARCHAR2(20),
    ThoiGian            DATE            NOT NULL,
    ViTri               SDO_GEOMETRY    NOT NULL,
    VanToc              NUMBER(10,2),
    HuongDiChuyen       NVARCHAR2(100),
    PRIMARY KEY (MaLogHaiTrinh, MaChuyenDanhBat)
);

-- 9. Bang CHUYEN_DANH_BAT
CREATE TABLE CHUYEN_DANH_BAT (
    MaChuyenDanhBat     NVARCHAR2(20) PRIMARY KEY,
    NgayXuatBen         DATE,
    NgayCapBen          DATE,
    CangDi              NVARCHAR2(100),
    CangVe              NVARCHAR2(100),
    TongKhoiLuong       NUMBER(12,2) DEFAULT 0,
    TrangThaiDuyet      NVARCHAR2(20) DEFAULT 'DANG CHO',
    TrangThaiHoatDong   NVARCHAR2(20) DEFAULT 'DANG CHO',
    MaTauCa             NVARCHAR2(20) NOT NULL,
    MaNguTruong         NVARCHAR2(20) NOT NULL
);

-- 10. Bang ME_CA
CREATE TABLE ME_CA (
    MaMeCa              INTEGER,
    MaChuyenDanhBat     NVARCHAR2(20),
    KhoiLuongMeCa       NUMBER(12,2) DEFAULT 0,
    ThoiGianThaLuoi     DATE,
    ThoiGianKeoLuoi     DATE,
    ViTriKeoLuoi        SDO_GEOMETRY NOT NULL,
    PRIMARY KEY (MaMeCa, MaChuyenDanhBat)
);

-- 11. BANG DANHBAT_THUYSAN
CREATE TABLE DANHBAT_THUYSAN (
    MaThuySan           NVARCHAR2(20),
    MaMeCa              INTEGER,
    MaChuyenDanhBat     NVARCHAR2(20),
    KhoiLuong           NUMBER NOT NULL,
    PRIMARY KEY (MaThuySan, MaMeCa, MaChuyenDanhBat)
);

-- 12. Bang THUY_SAN
CREATE TABLE THUY_SAN (
    MaThuySan           NVARCHAR2(20) PRIMARY KEY,
    TenLoaiThuySan      NVARCHAR2(100) UNIQUE
);

-- 13. Bang NGU_TRUONG
CREATE TABLE NGU_TRUONG (
    MaNguTruong         NVARCHAR2(20) PRIMARY KEY,
    TenNguTruong        NVARCHAR2(100) NOT NULL UNIQUE,
    ViTri               SDO_GEOMETRY NOT NULL,
    SoLuongTauHienTai   INTEGER DEFAULT 0,
    SoLuongTauToiDa     INTEGER NOT NULL
);

-- 14. Bang THOI_TIET
CREATE TABLE THOI_TIET (
    MaDuBao         NVARCHAR2(20) PRIMARY KEY,
    ThoiGianDuBao   DATE            DEFAULT SYSDATE,
    KhuVucAnhHuong  NVARCHAR2(100)  NOT NULL,
    ChiTietDuBao    NVARCHAR2(400)  NOT NULL
);

-- 15. Bang BAO
CREATE TABLE BAO (
    MaBao   NVARCHAR2(20)   PRIMARY KEY,
    TenBao  NVARCHAR2(100)  NOT NULL UNIQUE
);

-- 16. Bang LOG_DUONG_DI_BAO
CREATE TABLE LOG_DUONG_DI_BAO (
    MaLogDuongDi    INTEGER,
    MaBao           NVARCHAR2(20),
    ThoiGian        DATE            NOT NULL,
    ViTri           SDO_GEOMETRY    NOT NULL,
    MucDo           NUMBER(20)      NOT NULL,
    PRIMARY KEY (MaLogDuongDi, MaBao)
);

-- II. CREATE SEQUENCE
-- 1. FOR APP_USER
CREATE SEQUENCE SEQ_APP_USER
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TRG_CREATE_USER_ID
BEFORE INSERT ON APP_USER
FOR EACH ROW
BEGIN
  :NEW.USER_ID := 'USER' || SEQ_APP_USER.NEXTVAL;
END;
/

-- 2. FOR TAU_CA
CREATE SEQUENCE SEQ_TAU_CA
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TRG_CREATE_MaTauCa
BEFORE INSERT ON TAU_CA
FOR EACH ROW
BEGIN
  :NEW.MaTauCa := 'TC' || SEQ_TAU_CA.NEXTVAL;
END;
/

-- 3. FOR NGHE
CREATE SEQUENCE SEQ_NGHE
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TRG_CREATE_NGHE
BEFORE INSERT ON NGHE
FOR EACH ROW
BEGIN
  :NEW.MaNghe := 'NGHE' || SEQ_NGHE.NEXTVAL;
END;
/

-- 4. FOR VI_PHAM
CREATE SEQUENCE SEQ_VI_PHAM
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TRG_CREATE_VI_PHAM
BEFORE INSERT ON VI_PHAM
FOR EACH ROW
BEGIN
  :NEW.MaViPham := 'VP' || SEQ_VI_PHAM.NEXTVAL;
END;
/

-- 5. FOR CHUYEN_DANH_BAT
CREATE SEQUENCE SEQ_CHUYEN_DANH_BAT
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TRG_CREATE_CHUYEN_DANH_BAT
BEFORE INSERT ON CHUYEN_DANH_BAT
FOR EACH ROW
BEGIN
  :NEW.MaChuyenDanhBat := 'CDP' || SEQ_CHUYEN_DANH_BAT.NEXTVAL;
END;
/

-- 6. FOR THUY_SAN
CREATE SEQUENCE SEQ_THUY_SAN
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TRG_CREATE_THUY_SAN
BEFORE INSERT ON THUY_SAN
FOR EACH ROW
BEGIN
  :NEW.MaThuySan := 'TS' || SEQ_THUY_SAN.NEXTVAL;
END;
/

-- 7. FOR NGU_TRUONG
CREATE SEQUENCE SEQ_NGU_TRUONG
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TRG_CREATE_NGU_TRUONG
BEFORE INSERT ON NGU_TRUONG
FOR EACH ROW
BEGIN
  :NEW.MaNguTruong := 'NT' || SEQ_NGU_TRUONG.NEXTVAL;
END;
/

-- 8. FOR THOI_TIET
CREATE SEQUENCE SEQ_THOI_TIET
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TRG_CREATE_THOI_TIET
BEFORE INSERT ON THOI_TIET
FOR EACH ROW
BEGIN
  :NEW.MaDuBao := 'DB' || SEQ_THOI_TIET.NEXTVAL;
END;
/

-- 9. FOR BAO
CREATE SEQUENCE SEQ_BAO
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE OR REPLACE TRIGGER TRG_CREATE_BAO
BEFORE INSERT ON BAO
FOR EACH ROW
BEGIN
  :NEW.MaBao := 'BAO' || SEQ_BAO.NEXTVAL;
END;
/

-- 10. FOR LOG_HAI_TRINH
CREATE OR REPLACE TRIGGER TRG_CREATE_SEQ_LOG_HAI_TRINH
  FOR INSERT ON LOG_HAI_TRINH
  COMPOUND TRIGGER

    max_stt INTEGER;
    g_loaded BOOLEAN;

BEFORE STATEMENT IS
BEGIN
    g_loaded := FALSE;
END BEFORE STATEMENT;

BEFORE EACH ROW IS
BEGIN
    IF g_loaded = FALSE THEN
    SELECT NVL(MAX(MaLogHaiTrinh), 0)
    INTO max_stt
    FROM LOG_HAI_TRINH
    WHERE MaChuyenDanhBat = :NEW.MaChuyenDanhBat;

            g_loaded := TRUE;
    END IF;

    max_stt := max_stt + 1;
    :NEW.MaLogHaiTrinh := max_stt;
    
END BEFORE EACH ROW;

END;
/

-- 11. FOR LOG_DUONG_DI_BAO
CREATE OR REPLACE TRIGGER TRG_CREATE_SEQ_LOG_DUONG_DI_BAO
  FOR INSERT ON LOG_DUONG_DI_BAO
  COMPOUND TRIGGER

    max_stt INTEGER;
    g_loaded BOOLEAN;

BEFORE STATEMENT IS
BEGIN
    g_loaded := FALSE;
END BEFORE STATEMENT;

BEFORE EACH ROW IS
BEGIN
    IF g_loaded = FALSE THEN
    SELECT NVL(MAX(MaLogDuongDi), 0)
    INTO max_stt
    FROM LOG_DUONG_DI_BAO
    WHERE MaBao = :NEW.MaBao;

        g_loaded := TRUE;
    END IF;

    max_stt := max_stt + 1;
    :NEW.MaLogDuongDi := max_stt;
    
END BEFORE EACH ROW;

END;
/

-- 12. FOR ME_CA
CREATE OR REPLACE TRIGGER TRG_CREATE_SEQ_ME_CA
  FOR INSERT ON ME_CA
  COMPOUND TRIGGER

    max_stt INTEGER;
    g_loaded BOOLEAN;

BEFORE STATEMENT IS
BEGIN
    g_loaded := FALSE;
END BEFORE STATEMENT;

BEFORE EACH ROW IS
BEGIN
    IF g_loaded = FALSE THEN
    SELECT NVL(MAX(MaMeCa), 0)
    INTO max_stt
    FROM ME_CA
    WHERE MaChuyenDanhBat = :NEW.MaChuyenDanhBat;

        g_loaded := TRUE;
    END IF;

    max_stt := max_stt + 1;
    :NEW.MaMeCa := max_stt;

END BEFORE EACH ROW;
END;
/

-- III. CREATE CONSTRAINT
-- i. CHECK
ALTER TABLE APP_USER ADD CONSTRAINT CK_APP_USER_1 CHECK (ROLE IN ('ADMIN', 'CHUTAU'));

ALTER TABLE CHU_TAU ADD CONSTRAINT CK_CHU_TAU_1 CHECK (TrangThaiDuyet IN ('DANG CHO', 'DA DUYET', 'TU CHOI'));

ALTER TABLE TAU_CA ADD CONSTRAINT CK_TAU_CA_1 CHECK (TrangThaiDuyet IN ('DANG CHO', 'DA DUYET', 'TU CHOI'));
ALTER TABLE TAU_CA ADD CONSTRAINT CK_TAU_CA_2 CHECK (TrangThaiHoatDong IN ('DANG CHO|CHUA DK', 'DANG CHO|DA DK', 'DANG HOAT DONG'));

ALTER TABLE CHUYEN_DANH_BAT ADD CONSTRAINT CK_CHUYEN_DANH_BAT_1 CHECK (TrangThaiDuyet IN ('DANG CHO', 'DA DUYET', 'TU CHOI'));
ALTER TABLE CHUYEN_DANH_BAT ADD CONSTRAINT CK_CHUYEN_DANH_BAT_2 CHECK (TrangThaiHoatDong IN ('DANG CHO', 'DANG DANH BAT', 'HOAN THANH'));

ALTER TABLE LOG_DUONG_DI_BAO ADD CONSTRAINT CK_LOG_DUONG_DI_BAO_1 CHECK (Mucdo IN (1,2,3,4,5));

-- ii. FOREIGN KEY
ALTER TABLE ADMIN ADD CONSTRAINT FK_ADMIN_1 FOREIGN KEY (MaAdmin) REFERENCES APP_USER(USER_ID);

ALTER TABLE CHU_TAU ADD CONSTRAINT FK_CHU_TAU_1 FOREIGN KEY (MaChuTau) REFERENCES APP_USER(USER_ID);

ALTER TABLE TAU_CA ADD CONSTRAINT FK_TAU_CA_1 FOREIGN KEY (MaChuTau) REFERENCES CHU_TAU(MaChuTau);
ALTER TABLE TAU_CA ADD CONSTRAINT FK_TAU_CA_2 FOREIGN KEY (MaNgheChinh) REFERENCES NGHE(MaNghe);

ALTER TABLE TAU_NGHE ADD CONSTRAINT FK_TAU_NGHE_1 FOREIGN KEY (MaTauCa) REFERENCES TAU_CA(MaTauCa);
ALTER TABLE TAU_NGHE ADD CONSTRAINT FK_TAU_NGHE_2 FOREIGN KEY (MaNghe) REFERENCES NGHE(MaNghe);

ALTER TABLE VI_PHAM ADD CONSTRAINT FK_VI_PHAM_1 FOREIGN KEY (MaChuyenDanhBat) REFERENCES CHUYEN_DANH_BAT(MaChuyenDanhBat);

ALTER TABLE LOG_HAI_TRINH ADD CONSTRAINT FK_LOG_HAI_TRINH_1 FOREIGN KEY (MaChuyenDanhBat) REFERENCES CHUYEN_DANH_BAT(MaChuyenDanhBat);

ALTER TABLE CHUYEN_DANH_BAT ADD CONSTRAINT FK_CHUYEN_DANH_BAT_1 FOREIGN KEY (MaTauCa) REFERENCES TAU_CA(MaTauCa);
ALTER TABLE CHUYEN_DANH_BAT ADD CONSTRAINT FK_CHUYEN_DANH_BAT_2 FOREIGN KEY (MaNguTruong) REFERENCES NGU_TRUONG(MaNguTruong);

ALTER TABLE ME_CA ADD CONSTRAINT FK_ME_CA_1 FOREIGN KEY (MaChuyenDanhBat) REFERENCES CHUYEN_DANH_BAT(MaChuyenDanhBat);

ALTER TABLE DANHBAT_THUYSAN ADD CONSTRAINT FK_DANHBAT_THUYSAN_1 FOREIGN KEY (MaThuySan) REFERENCES THUY_SAN(MaThuySan);
ALTER TABLE DANHBAT_THUYSAN ADD CONSTRAINT FK_DANHBAT_THUYSAN_2 FOREIGN KEY (MaMeCa,MaChuyenDanhBat) REFERENCES ME_CA(MaMeCa,MaChuyenDanhBat);

ALTER TABLE LOG_DUONG_DI_BAO ADD CONSTRAINT FK_LOG_DUONG_DI_BAO_1 FOREIGN KEY (MaBao) REFERENCES BAO(MaBao);

--test